You are being provided a comprehensive description of a financial software project: a Backtesting Engine for Trading Strategies, designed by a computer science student with intermediate Python knowledge and foundational finance understanding. The goal is to simulate and evaluate the performance of algorithmic trading strategies over historical and live market data. Please continue development from where this project left off, and use the folder structure and implementation plan given below. The student prefers a structured and progressive build process, working on core features first and saving more complex features like live data integration for the final phase.

Project Overview:
This project is a modular Python-based backtesting engine. It simulates trading strategies over historical data, tracks performance, and optionally integrates with live market data to simulate real-time trading decisions (paper trading). The engine is designed to be extensible with multiple strategies, evaluation metrics, and visualization components.


Folder structure
backtester/
├── data/
│   ├── raw/                     # Raw historical data (CSV or API)
│   └── processed/               # Cleaned and prepped time-series data
├── strategies/
│   └── moving_average.py        # First strategy: MA Crossover
├── engine/
│   ├── backtest.py              # Core simulation logic
│   ├── portfolio.py             # Handles trades, capital, equity
│   └── metrics.py               # Returns, Sharpe, drawdown, etc.
├── live/
│   └── live_trading.py          # Final stage: real-time data hook
├── utils/
│   ├── data_loader.py           # Loaders for CSV and APIs
│   ├── visualizer.py            # Matplotlib/Plotly visualization
│   └── config.py                # Strategy config and runtime options
├── main.py                      # CLI or UI entry point
├── requirements.txt             # Python dependencies
└── README.md                    # Documentation


Development Roadmap:

Phase 1 – Core Backtest Engine (✔ Completed):

data_loader.py: Load CSV with historical OHLCV time-series data.

portfolio.py: Simulate trades (buy/sell), manage cash, and track equity.

moving_average.py: Implement a basic 20/50-day moving average crossover.

backtest.py: Execute the strategy over historical data, simulate trades, and track portfolio value.

Output: Final equity value and a trade log.

Phase 2 – Performance Analytics:

metrics.py: Compute Sharpe Ratio, Max Drawdown, Win Rate, CAGR, Volatility.

Generate a report/snapshot of the backtest.

visualizer.py: Plot OHLC data with buy/sell markers, equity curve, and drawdown curve.

Phase 3 – Modular Strategy System:

Create a BaseStrategy abstract class or interface.

Add support for additional strategies (e.g., RSI crossover, Bollinger Bands).

Allow config.py to set strategy name, parameters, and simulation range.

Phase 4 – CLI or UI Interface (Optional):

Use argparse in main.py to accept options like:

--symbol, --start-date, --strategy, --cash, --plot

Or, build a Streamlit web UI for interactive experimentation.

Phase 5 – Live Data Simulation (Final Stage):

live_trading.py:

Use yfinance, Twelve Data, or Alpaca API for price feeds.

Simulate trade execution in real-time using strategy logic.

Log paper trades, update simulated portfolio live.


Go step by step. First, complete phase 1, then 2 and so on. Follow the given instructions only, and nothing more.